<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tarena.dao.UserMapper">
	<select id="login" 
	        parameterType="User"
	        resultType="java.lang.String">
		select 
		     user_id as id
		from t_user
		where user_loginname=#{loginName} and
		      user_password=#{password}
	</select>
	
	<!-- role的ResultMap -->
	<resultMap type="Role" id="roleMap">
	    <!-- 注意:从表中的外键id,不能跟主表的主键id名字相同 -->
		<id property="id" column="role_id" />
		<result property="name" column="role_name"/>
	</resultMap>
	<!-- user的resultMap -->
	<resultMap type="User" id="userMap">
		<id property="id" column="user_id" jdbcType="VARCHAR"/>
		<result property="loginName" column="user_loginname" jdbcType="VARCHAR"/>
		<result property="loginType" column="user_logintype" jdbcType="VARCHAR"/>
		<result property="nickName" column="user_nickname" jdbcType="VARCHAR"/>
		<result property="password" column="user_password" jdbcType="VARCHAR"/>
		<result property="type" column="user_type" jdbcType="INTEGER"/>
		<result property="head" column="user_head" jdbcType="VARCHAR"/>
		<result property="score" column="user_score" jdbcType="INTEGER"/>
		<result property="isLock" column="user_islock" jdbcType="CHAR"/>
		<result property="pwdState" column="user_pwdstate" jdbcType="VARCHAR"/>
		<result property="regDate" column="user_regdate" jdbcType="TIMESTAMP"/>
		<result property="age" column="user_age" jdbcType="INTEGER"/>
		<result property="sex" column="user_sex" jdbcType="CHAR"/>
		<result property="introduction" column="user_introduction" jdbcType="VARCHAR"/>
		<collection property="roles" ofType="Role" 
		            javaType="java.util.List"
		            resultMap="roleMap"></collection>
	</resultMap>
	<!-- 用户的分页+模糊(全部数据) -->
	<select id="getCount"
	        parameterType="Page"
	        resultType="java.lang.Integer">
		select
		   count(user_id) as geshu
		from t_user
		where 
		   user_loginname like #{userKeyword} or
		   user_nickname like #{userKeyword}
	</select>
	<select id="getUsers"
	        parameterType="Page"
	        resultMap="userMap">
		select
			u.user_id,
			u.user_loginname,
			u.user_logintype,
			u.user_nickname,
			u.user_password,
			u.user_type,
			u.user_head,
			u.user_score,
			u.user_islock,
			u.user_pwdstate,
			u.user_regdate,
			u.user_age,
			u.user_sex,
			r.role_id,
			r.role_name
		from (
				select * from t_user 
				where 
				  user_loginname like #{userKeyword} or
				  user_nickname like #{userKeyword}
				limit #{begin},#{pageSize}
		     ) u
	    left outer join t_user_role ur on u.user_id=ur.uid
	    left outer join t_role r on ur.rid=r.role_id
	    
	</select>
	<delete id="deleteUser" 
	        parameterType="java.lang.String">
		delete from t_user where user_id=#{id}
	</delete>
	<delete id="deleteUserRole" 
	        parameterType="java.lang.String">
		delete from t_user_role where uid=#{id}
	</delete>
	<!-- 删除指定用户id的视频和缓存表 -->
	<delete id="deleteHistoryCacheByUserId"
	        parameterType="java.lang.String">
		delete from t_history_cache_collection_purchased
		where user_id=#{userId}        
	</delete>
	<!-- 根据用户id查询用户信息 -->
	<select id="findUserById" 
	        parameterType="java.lang.String"
	        resultMap="userMap">
		select
			u.user_id,
			u.user_loginname,
			u.user_logintype,
			u.user_nickname,
			u.user_password,
			u.user_type,
			u.user_head,
			u.user_score,
			u.user_islock,
			u.user_pwdstate,
			u.user_regdate,
			u.user_age,
			u.user_sex,
			r.role_id,
			r.role_name
		from (
				select * from t_user 
				where 
				  user_id=#{userId}
		     ) u
	    left outer join t_user_role ur on u.user_id=ur.uid
	    left outer join t_role r on ur.rid=r.role_id
	</select>
	<!-- 添加用户 -->
	<insert id="addUser"
	        parameterType="User">
		insert into t_user
		(
			user_id,
			user_loginname,
			user_password,
			user_nickname,
			user_age,
			user_sex,
			user_head
		)
		values
		(
			#{id},
			#{loginName},
			#{password},
			#{nickName},
			#{age},
			#{sex},
			#{head}
		)
	        
	</insert>
	<!-- 添加用户和角色的中间表 -->
	<insert id="addUserRole"
	        parameterType="UserRole">
		insert into t_user_role
		(
			uid,
			rid
		)
		values
		(
			#{userId},
			#{roleId}
		)  
	        
	</insert>
	<!-- 更新用户信息 -->
	<update id="updateUser" 
	        parameterType="User">
	        
		update t_user set
			user_loginname=#{loginName},
			user_password=#{password},
			user_nickname=#{nickName},
			user_age=#{age},
			user_sex=#{sex},
			user_head=#{head}
		where user_id=#{id}
	
	</update>
	<!-- 分页+模糊(指定角色名称) -->
	<select id="getCountByRole"
	        parameterType="Page"
	        resultType="java.lang.Integer">
		select 
		    count(u.user_id)
		from 
		(
		    select 
		          * 
		    from t_role
		    where role_name like #{roleType}      
		)  r
		left outer join t_user_role ur on r.role_id=ur.rid
		left outer join (
		                    select 
		                        * 
		                    from t_user
		                    where 
		                      user_loginname like #{userKeyword} or
		                      user_nickname like #{userKeyword}
		                ) u on u.user_id=ur.uid
	</select>
	
	<select id="getUsersByRole"
	        parameterType="Page"
	        resultMap="userMap">
		select 
		    u.user_id,
			u.user_loginname,
			u.user_logintype,
			u.user_nickname,
			u.user_password,
			u.user_type,
			u.user_head,
			u.user_score,
			u.user_islock,
			u.user_pwdstate,
			u.user_regdate,
			u.user_age,
			u.user_sex,
			r.role_id,
			r.role_name
		    
		from 
		(
		    select 
		          * 
		    from t_role
		    where role_name like #{roleType}      
		)  r
		left outer join t_user_role ur on r.role_id=ur.rid
		left outer join (
		                    select 
		                        * 
		                    from t_user
		                    where 
		                      user_loginname like #{userKeyword} or
		                      user_nickname like #{userKeyword}
		                ) u on u.user_id=ur.uid
		limit #{begin},#{pageSize}
	
	</select>
	<!-- 查询所有数据 -->
	<select id="findAllUsers"
	        resultMap="userMap">
	     select
			u.user_id,
			u.user_loginname,
			u.user_logintype,
			u.user_nickname,
			u.user_password,
			u.user_type,
			u.user_head,
			u.user_score,
			u.user_islock,
			u.user_pwdstate,
			u.user_regdate,
			u.user_age,
			u.user_sex,
			r.role_id,
			r.role_name
		from t_user u
	    left outer join t_user_role ur on u.user_id=ur.uid
	    left outer join t_role r on ur.rid=r.role_id
	
	</select>
	
	
</mapper>